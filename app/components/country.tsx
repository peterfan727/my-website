type CountryCode = string  

type CountryMapping = {
    [key in CountryCode]: string;
}

const countryMappings: CountryMapping = {
    CA: 'Canada ğŸ‡¨ğŸ‡¦',
    US: 'United States ğŸ‡ºğŸ‡¸',
    AU: 'Australia ğŸ‡¦ğŸ‡º',
    CN: 'China ğŸ‡¨ğŸ‡³',
    TW: 'Taiwan ğŸ‡¹ğŸ‡¼',
    DE: 'Germany ğŸ‡©ğŸ‡ª',
    ES: 'Spain ğŸ‡ªğŸ‡¸',
    FR: 'France ğŸ‡«ğŸ‡·',
    GB: 'United Kingdom ğŸ‡¬ğŸ‡§',
    HK: 'Hong Kong ğŸ‡­ğŸ‡°',
    ID: 'Indonesia ğŸ‡®ğŸ‡©',
    IE: 'Ireland ğŸ‡®ğŸ‡ª',
    IN: 'India ğŸ‡®ğŸ‡³',
    IT: 'Italy ğŸ‡®ğŸ‡¹',
    JP: 'Japan ğŸ‡¯ğŸ‡µ',
    KR: 'South Korea ğŸ‡°ğŸ‡·',
    MX: 'Mexico ğŸ‡²ğŸ‡½',
    MY: 'Malaysia ğŸ‡²ğŸ‡¾',
    NZ: 'New Zealand ğŸ‡³ğŸ‡¿',
    PH: 'Philippines ğŸ‡µğŸ‡­',
    RU: 'Russia ğŸ‡·ğŸ‡º',
    SG: 'Singapore ğŸ‡¸ğŸ‡¬',
    TH: 'Thailand ğŸ‡¹ğŸ‡­',
    UA: 'Ukraine ğŸ‡ºğŸ‡¦',
    VN: 'Vietnam ğŸ‡»ğŸ‡³',
};

/**
 * Check if the country code is in the dictionary and return the country name and emoji.
 * @param countryCode? string | null | undefined - the country code
 * @returns string | undefined
 */
export default function Country ( countryCode?: string) {
    if (!countryCode) {
        return undefined
    }
    return countryMappings[countryCode]
};


